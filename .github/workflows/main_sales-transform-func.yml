# Docs for the Azure Web Apps Deploy action: https://github.com/azure/functions-action
# More GitHub Actions for Azure: https://github.com/Azure/actions
# More info on Python, GitHub Actions, and Azure Functions: https://aka.ms/python-webapps-actions

name: Build and deploy Python project to Azure Function App - sales-transform-func

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  # Path to your Azure Function App project root.
  # This should be the directory containing host.json and your function folders.
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'
  PYTHON_VERSION: '3.10' # supported: 3.6 to 3.11
  AZURE_WEB_JOBS_STORAGE: ${{ secrets.AZURE_WEB_JOBS_STORAGE }} # This secret should contain your Storage Account connection string

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # --- CRITICAL CHANGE START ---
      # Create and activate virtual environment in a specific directory
      # Install dependencies into this local venv's site-packages directory
      # This is where pandas will be installed locally by GitHub Actions
      - name: Install dependencies locally into a .python_packages folder
        run: |
          # Create a directory for Python packages directly in the project root
          mkdir -p .python_packages/lib/python${{ env.PYTHON_VERSION }}/site-packages
          # Install dependencies into this specific target directory
          pip install --target=".python_packages/lib/python${{ env.PYTHON_VERSION }}/site-packages" -r requirements.txt
          # Verify pandas is installed (optional, but good for debugging)
          python -c "import pandas; print(f'Pandas version: {pandas.__version__}')"
          # Ensure azure-functions is also there if your code relies on it explicitly being in site-packages
          pip install --target=".python_packages/lib/python${{ env.PYTHON_VERSION }}/site-packages" azure-functions
      # --- CRITICAL CHANGE END ---

      - name: Zip artifact for deployment
        # Now, zip the *entire* project, INCLUDING the newly created .python_packages folder.
        # We explicitly exclude .git and .github as they are not needed for the runtime.
        run: zip -r release.zip . -x ".git/*" ".github/*"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: release.zip # Upload the created zip file

  deploy:
    runs-on: ubuntu-latest
    needs: build # This job depends on the 'build' job completing successfully
    permissions:
      id-token: write # Required for Azure login with OIDC
      contents: read # Required to download artifacts

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: python-app # Name of the artifact to download
          path: ${{ github.workspace }} # Download to the root of the workspace

      - name: Unzip artifact
        # Unzip the artifact. The zip contains the root of your function app.
        # Unzip into a temporary directory so the Azure Functions action can pick it up.
        run: unzip ${{ github.workspace }}/release.zip -d ${{ github.workspace }}/output_package

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_E30EA3E8A2FF4903BECAA81CB74C5311 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_D117809BE3644E4CA0E4EFF6B39F51B7 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_8D6A3A189D5845E3B8B0461DED3E37F2 }}

      - name: Deploy to Azure Functions
        uses: Azure/functions-action@v1
        id: deploy-to-function
        with:
          app-name: 'sales-transform-func'
          slot-name: 'Production'
          # CRITICAL CHANGE: Set `enable-oryx-build` to false.
          # We are now packaging dependencies ourselves, so Oryx should NOT rebuild.
          enable-oryx-build: false # <--- THIS IS NOW FALSE
          # Point the package to the unzipped directory containing your function app's root files,
          # which now includes the .python_packages folder with installed dependencies.
          package: ${{ github.workspace }}/output_package
